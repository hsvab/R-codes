---
title: "ggplot e as bases do R"
author: "Bruna Garbes"
date: "13 de junho de 2019"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Há várias maneiras de se encontrar os datasets (os bases de dados) disponíveis no R:

1) Usando o comando `data()` podemos ver a lista de datasets oriundos do R básico e de todos os pacotes carregados. Os datasets são ordenados por pacote.

2) Usando o comando `data(package = .packages(all.available = TRUE))` poderemos ver todos os datasets disponiveis em todos os nossos pacotes baixados, mesmo que não tenhamos carregado eles.

3) Usadno o comando `data(package = "packagename")` poderemos ver os datasets oriundos de um pacote específico, ou seja, `data(package = "dplyr")` retornará todos os datasets disponiveis no pacote do dplyr 


O `ggplot` é um pacote voltado para a visualização de dados e se baseia em um conceito chamado **grammar of graphics**.

Faz parte do conjunto de pacotes do `tidyverse` e foi criado pelo Hadley Wickam.

**grammar of grafics** são conceitos e definições sobre o que é um gráfico e são oriundos do livro Grammar of Graphics ("Gramática dos Gráficos") de Leland Wilkinson.

Do mesmo jeito que a gramática da língua portuguesa possui uma série de regras para a combinação de palavras, frases e sentenças visando a combinação desses componentes para a produção de sentenças válidas (ou gramaticalmente corretas), a gramática dos gráficos também é conjunto de regras para a combinação de certos componentes gráficos para a construção de gráficos.

Exemplos de componentes gráficos: dado a ser usado para gerar o gráfico, um sistema de coordenadas (eixo x e eixo y), transformações estatísticas (cálculo de frequências) e objetos dentro de um gráfico, como pontos, barras, linhas, etc.

#Como funciona?

Instalando o pacote
```{r}
install.packages("ggplot2") #se já instalou o tidyverse o ggplot2 já está na sua máquina!

```

Carregando o pacote
```{r}
library(ggplot2)
```

No ggplot todo gráfico começa com o comando `ggplot()` que aceita pelo menos dois argumentos: o dataset que queremos usar e o componente do dado que queremos representar no gráfico. Esse segundo argumento é passado com uma função chamada *aesthetics* ou `aes()`

Por exemplo, usando a base de dados *airquality* que reúne dados da qualidade do ar da cidade de New York podemos criar um histograma da variável **Temp** 
```{r}
df <- airquality
ggplot(df, aes(x = Temp))
```

Os comandos acima geram uma figura em branco pois precisamos dizer qual tipo de gráfico queremos gerar. Nesse caso vamos plotar um histograma que no ggplot é gerado com a função `geom_histogram()`. Para cada tipo de gráfico o ggplot disponibiliza seus respectivos **geoms**
```{r}
ggplot(df, aes(x = Temp)) +
  geom_histogram()
```
Para modificarmos a aparência do nosso geom podemos passar argumentos para essa função como também podemos adicionar temas e legendas de modo que podemos esquemetizar a criação de gráficos no ggplot2 da seguinte maneira:

ggplot(meu_df, aes(variaveis_do_df_que_devem_ser_representadas_no_grafico)) +
  geom_xxx(argumentos_para_mudar_a_aparencia_do_geom) +
  theme_xxx(argumentos_para_mudar_aparencia_geral_do_grafico) +
  labs(adiciona_nomes_dos_eixos_e_titulo)
  
```{r}
ggplot(df, aes(x = Temp)) +
  geom_histogram(binwidth = 5, color = "black", fill = "grey80") +
  theme_bw()+
  labs(x = "Temperatura (F)", y = "Frequência", title = "Temperatura no dataframe Airquality")
```
  No exemplo acima mudamos as larguras das barras (que são chamadas de bin) com o binwidth = 5 a cor de contorno das barras como sendo preto com o argumento color e a cor de preenchimento das barras com o argumento fill = grey80. Já o fundo quadriculado adicionamos com a função chamada theme_bw()

##Desafio 1 - Plotar o  histograma da variável price da base de dados **diamonds**
```{r}
diamantes <- ggplot2::diamonds #base de dados disponível no pacote do ggplot

diamantes %>% ggplot() +
  geom_histogram(aes(x = price)) +
  theme_bw() +
  labs(x = "Preço (em dolares)", y = "Frequência", title = "Distribuição dos valores dos diamantes")
```


##Gráfico de barras

Para fazermos gráfico de barras usamos o *geom_bar*
```{r}

library(MASS)
carros <- Cars93

ggplot(carros, aes(x = Type)) +
  geom_bar() +
  labs(x = "Tipo de carro", y = "Frequência", 
       title = "Tipo de carro na base Cars93")

```

Para criarmos barras representando sub-grupos dentro das categorias que estamos analisando podemos usar o argumento fill da função aes

```{r}

ggplot(carros, aes(x = Type, fill = Origin)) +
  geom_bar(position = "dodge", color = "black") + #aes(fill = Origin) pode vim aqui tbm!
  #se não passamos o parametro position os subgrupos são representados com 1 coluna só 
  scale_fill_grey(start = 0, end = 1) + #especifica as cores das barras
  theme_bw() +
  labs(x = "Tipo de carro", y = "Frequência", 
       title = "Tipo de carro na base Cars93", 
       fill = "Origem")

```

É interessante notar que a categoria Large possui somente carros de origem americana (frequência 0 de carros estrangeiros), então o ggplot mostra a barra correspondente com o dobro da largura das outras barras.

##Desafio 2 - Plotar o  gráfico de barras usando a base **diamonds**
Plote um gráfico de barras da váriavel claridade da pedra incluindo a informação sobre a cor da pedra para cada tipo de claridade de pedra. Use também legendas apropriadas

```{r}

diamantes %>%  ggplot(aes(x=clarity, fill=color)) +
  geom_bar(position = "dodge", color = "black") + 
  scale_fill_discrete() +
  theme_bw() +
  labs(title = "Cores dos diamantes por tipo de claridade", 
       x = "Claridade do diamante", 
       y = "Contagem", 
       fill = "Cor")

```


Nos exemplos anteriores não precisamos mapear uma variável no eixo y porque o ggplot conta as frequências das observações de cada categoria e as plota no gráfico, mas e no caso quando temos essas frequências? 
```{r}
library(datasets)

mulheres <- HairEyeColor[,,2] 

t(mulheres) #wide format mas o ggplot precisa dos dados no long format
# não podemos usar as funções do tidyverse pois mulheres é uma matriz

mulheres <- data.frame(mulheres) #aplicando a função data.frame transforma diretamente nossos dados no long format

ggplot(mulheres, aes(x = Hair, y = Freq, fill = Eye)) + #mapeamos a coluna freq no eixo y
  geom_bar(position = "dodge", color = "black", stat = "identity") + 
  #stat = "identity" indica para o ggplot não calcular as frequencias mas sim usar as infos da tabela
  scale_fill_grey(start = 0, end = 1)

```

##Gráfico de dispersão

É um bom tipo de gráfico para mostrar a relação entre duas variáveis

```{r}
ggplot(airquality, aes(x = Wind, y = Temp)) +
  geom_point()
```

Podemos usar cores nos pontos para indicar uma terceira variável do nosso dado

```{r}
library(tidyr)

df <- airquality %>% 
  data.frame() %>% 
  drop_na() %>% 
  mutate(Ozone_level = 
           ifelse(Ozone <= mean(Ozone), "Low", "High"))

head(df)

ggplot(df, aes(x = Wind, y = Temp, color = Ozone_level)) +
  geom_point(size = 3) +
  scale_color_grey(start = 0.5, end = 0)

```

##Desafio 3 - plotar um gráfico de disperção
Plote um gráfico de dispersão das variáveis price e carat pintando os pontos de acordo com a qualidade do corte das pedras
```{r}
diamantes %>% 
  ggplot(aes(x = carat, y = price, color = cut)) + 
  geom_point()
```

## Boxplot

Muitas vezes queremos visualizar quão diferente nossos grupos são

```{r}
df %>% 
  ggplot(aes(x = as.factor(Month), y = Temp)) +
  geom_boxplot()
#as.factor transforma a minha variavel numerica em categórica 
# precisamos disso pois no boxplot o eixo x precisa conter uma variavel categórica
```

Podemos plotar todos pontos usados na contrução do gráfico e também renomear o eixo x com os nomes dos meses
```{r}
df %>% 
  ggplot(aes(x = as.factor(Month), y = Temp)) +
  geom_boxplot() +
  geom_point() + #mostra todas os pontos
  labs(x = "Mês", y = "Temperatura") +
  scale_x_discrete(labels = c("Maio", "Junho", "Julho", "Agosto", "Setembro"))
```



##Desafio 4 - plotar um boxplot

Filtre a coluna color para selecionar apenas as pedras das cores E, F e G e plot um boxplot do preço dos diamentes para cada uma dessas categorias de cor

```{r}
diamantes %>% 
  filter(color %in% c("E", "F", "G")) %>%
  ggplot(aes(x = color, y = price, fill = color)) + 
  geom_boxplot(show.legend = FALSE) +
  labs(title = "Boxplot das cores dos diamantes", 
       x = "Cor do diamante", 
       y = "Preço do diamante")
```

Os exemplos dessa aula foram baseados no capítulo 3 do livro R projects for Dummies


https://www.google.com/search?q=r+projects+for+dummies&rlz=1C1GCEA_enBR743BR743&tbm=isch&source=iu&ictx=1&fir=A5eCw4NpY5xgoM%253A%252CxerOzweNsM-9ZM%252C%252Fg%252F11gfjb1xbq&vet=1&usg=AI4_-kSpaGHMI9N4wC-yOKkVswuQMkMMBQ&sa=X&ved=2ahUKEwir8Yau3OviAhVFGLkGHdLaDNgQ_B0wCnoECAoQAw#imgrc=A5eCw4NpY5xgoM:


